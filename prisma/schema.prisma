datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

generator client {
    provider      = "prisma-client-js"
    engineType    = "library"
    binaryTargets = ["native", "windows"]
}

model User {
    id    Int     @id @default(autoincrement())
    email String  @unique
    name  String?
}

model Departement {
    id                       Int                       @id @default(autoincrement())
    name                     String                    @unique
    totalCreditHour          Int
    pricePerCreditHour       Decimal
    departementPaymentPrices DepartementPaymentPrice[]
    paymentTypeId            Int
    creditHoursPerPaymentWay Decimal
    paymentWay               PaymentType               @relation(fields: [paymentTypeId], references: [id])
    students                 Student[]
    isActive                 Boolean                   @default(true)
}

model PaymentType {
    id                       Int                       @id @default(autoincrement())
    name                     String                    @unique
    code                     String                    @unique
    isPaymentWay             Boolean                   @default(false)
    isActive                 Boolean                   @default(true)
    departments              Departement[]
    departementPaymentPrices DepartementPaymentPrice[]
    paymentTypePrice PaymentTypePrice[]
}

model DepartementPaymentPrice {
    id            Int         @id @default(autoincrement())
    departementId Int
    paymentTypeId Int
    price         Decimal
    departement   Departement @relation(fields: [departementId], references: [id], onDelete: Cascade)
    paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])
}

model Student {
    id            Int         @id @default(autoincrement())
    name          String
    collageId     String      @unique
    departementId Int
    departement   Departement @relation(fields: [departementId], references: [id], onDelete: Cascade)
    registeredAt  DateTime    @default(now())
    discount Int?
    payments Payment[]
    isActive      Boolean     @default(true)
}

model Payment {
    id            Int         @id @default(autoincrement())
    title          String 
    studentId Int
    student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
    attachmentNo String
    checkNo String
    paymentTypes PaymentTypePrice[]
    total Decimal
    createdAT DateTime  @default(now())
}

model PaymentTypePrice {
    id            Int         @id @default(autoincrement())
    paymentId Int
    payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
    paymentTypeId Int
    paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id], onDelete: Cascade)
    price Decimal
    month Int?
    year Int?
}

